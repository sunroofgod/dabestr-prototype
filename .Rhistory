main_violin_type <- "singlecolour"
}
if(isTRUE(delta2)) {
is_deltadelta <- TRUE
}
if(isTRUE(zero_dot) && isTRUE(flow)) {
is_zero_dot <- TRUE
}
if(isFALSE(float_contrast)) {
is_summary_lines <- FALSE
}
plot_component <- list(
main_violin_type = main_violin_type,
is_summary_lines = is_summary_lines,
is_bootci = is_bootci,
is_deltadelta = is_deltadelta,
is_zero_dot = is_zero_dot
)
return(plot_component)
}
create_violinplot_components <- function(boots,
idx,
float_contrast,
delta_y_max,
delta_y_min,
flow = TRUE,
zero_dot = TRUE) {
df_for_violin <- data.frame(
x = NA,
y = NA,
tag = NA
)
x_axis_breaks <- c()
zero_dot_x_breaks <- c()
curr_boot_idx <- 1
curr_x_idx <- 0
x_axis_scalar <- ifelse(flow, 0, 0.5)
for(group in idx) {
curr_x_idx <- curr_x_idx + 1
if(isTRUE(zero_dot)) {
zero_dot_x_breaks <- append(zero_dot_x_breaks, curr_x_idx)
}
temp_df_violin <- data.frame(x = NA,
y = NA,
tag = toString(curr_x_idx))
df_for_violin <- rbind(df_for_violin, temp_df_violin)
for(i in 2:length(group)) {
curr_x_idx <- curr_x_idx + 1
x_axis_breaks <- append(x_axis_breaks, curr_x_idx)
ci_coords <- density(boots[[curr_boot_idx]])
x_coords_ci <- ci_coords$x
y_coords_ci <- ci_coords$y
# Standardise y
y_coords_ci <- (y_coords_ci - min(y_coords_ci))/(max(y_coords_ci) - min(y_coords_ci))
y_coords_ci <- y_coords_ci/6
if (isFALSE(float_contrast)) {
y_coords_ci <- y_coords_ci/1.5
}
y_coords_ci <- y_coords_ci + curr_x_idx - x_axis_scalar
min_x_coords <- min(x_coords_ci)
max_x_coords <- max(x_coords_ci)
# Keeping track of ylim limits
if(min_x_coords < delta_y_min) {
delta_y_min <- min_x_coords
}
if(max_x_coords > delta_y_max) {
delta_y_max <- max_x_coords
}
temp_df_violin <- data.frame(x = x_coords_ci,
y = y_coords_ci,
tag = rep(toString(curr_x_idx), 512))
df_for_violin <- rbind(df_for_violin, temp_df_violin)
curr_boot_idx <- curr_boot_idx + 1
}
}
df_for_violin <- df_for_violin %>%
arrange(tag, x , y)
plot_component <- list(
df_for_violin = df_for_violin,
delta_y_min = delta_y_min,
delta_y_max = delta_y_max,
x_axis_breaks = x_axis_breaks,
zero_dot_x_breaks = zero_dot_x_breaks
)
return(plot_component)
}
plot_delta <- function(dabest_effectsize_obj, float_contrast, plot_kwargs) {
idx = dabest_effectsize_obj$idx
separated_idx <- idx
bootstraps = dabest_effectsize_obj$bootstraps
proportional <- dabest_effectsize_obj$proportional
paired <- dabest_effectsize_obj$paired
delta_x_labels = unlist(dabest_effectsize_obj$delta_x_labels)
delta_y_labels = plot_kwargs$contrast_label
minimeta <- plot_kwargs$show_mini_meta
delta2 <- plot_kwargs$show_delta2
is_colour <- dabest_effectsize_obj$is_colour
is_paired <- dabest_effectsize_obj$is_paired
raw_y_range_vector <- dabest_effectsize_obj$ylim
raw_y_max <- raw_y_range_vector[2]
raw_y_min <- raw_y_range_vector[1]
control_summary <- dabest_effectsize_obj$control_summary
test_summary <- dabest_effectsize_obj$test_summary
# Initialising x & y limits
delta_x_max = length(unlist(idx))
delta_y_min = .Machine$double.xmax
delta_y_max = .Machine$double.xmin
# Obtain boot
boot_result <- dabest_effectsize_obj$boot_result
boots <- boot_result$bootstraps
# Check if multiplot
if(length(unlist(idx)) >= 3) {
float_contrast <- FALSE
}
#### Load in sizes of plot elements ####
raw_marker_size <- plot_kwargs$raw_marker_size
raw_marker_alpha <- plot_kwargs$raw_marker_alpha
raw_bar_width <- plot_kwargs$raw_bar_width
tufte_size <- plot_kwargs$tufte_size
es_marker_size <- plot_kwargs$es_marker_size
es_line_size <- plot_kwargs$es_line_size
flow <- plot_kwargs$flow
contrast_x_text <- plot_kwargs$contrast_x_text
contrast_y_text <- plot_kwargs$contrast_y_text
zero_dot <- plot_kwargs$zero_dot
#### Deltaplot Building ####
delta_plot_components <- create_deltaplot_components(proportional,
is_paired,
float_contrast,
is_colour,
delta2,
zero_dot,
flow)
main_violin_type <- delta_plot_components$main_violin_type
is_summary_lines <- delta_plot_components$is_summary_lines
is_bootci <- delta_plot_components$is_bootci
is_deltadelta <- delta_plot_components$is_deltadelta
is_zero_dot <- delta_plot_components$is_zero_dot
raw_plot_components <- create_rawplot_components(proportional, is_paired, float_contrast)
main_plot_type <- raw_plot_components$main_plot_type
#### initialise delta_plot & Add main_violin_type component ####
# Extend idx and labels if minimeta or deltadelta
if (isTRUE(minimeta) || isTRUE(delta2)) {
separated_idx <- c(separated_idx, list(c("minimeta", "deltadelta")))
idx <- separated_idx
}
if(main_plot_type == "sankey" && isFALSE(flow)) {
separated_idx <- separate_idx(idx, paired)
delta_x_max = length(unlist(separated_idx))
is_tufte_lines <- FALSE
}
violin_plot_components <- create_violinplot_components(boots,
separated_idx,
float_contrast,
delta_y_max,
delta_y_min,
flow,
zero_dot)
df_for_violin <- violin_plot_components$df_for_violin
delta_y_min <- violin_plot_components$delta_y_min
delta_y_max <- violin_plot_components$delta_y_max
delta_y_mean <- (delta_y_max - delta_y_min)/2
x_axis_breaks <- violin_plot_components$x_axis_breaks
zero_dot_x_breaks <- violin_plot_components$zero_dot_x_breaks
if(main_plot_type == "sankey" && isFALSE(flow)) {
x_axis_breaks <- x_axis_breaks - 0.5
}
delta_plot <- switch(
main_violin_type,
"multicolour" =
ggplot() +
geom_halfviolin(na.rm = TRUE,
data = df_for_violin,
aes(x = y, y = x, fill = tag)),
"singlecolour" =
ggplot() +
geom_halfviolin(na.rm = TRUE,
data = df_for_violin,
aes(x = y, y = x, group = tag))
)
#### Add scaling Component ####
raw_ylim <- plot_kwargs$swarm_ylim
raw_ylim <- if (is.null(raw_ylim)){c(raw_y_min, raw_y_max)} else {raw_ylim}
## Add labels ##
if (isTRUE(minimeta)) {
delta_x_labels <- append(delta_x_labels, "Weighted\nDelta")
}
if (isTRUE(delta2)) {
delta_x_labels <- append(delta_x_labels, "delta-delta")
}
if(isTRUE(float_contrast)) {
difference = boot_result$difference
if(main_plot_type == "unpaired proportions") {
raw_y_range_vector <- c(0, 1)
}
# Calculate new ylims to align summary lines
min_raw_y <- raw_ylim[1]
max_raw_y <- raw_ylim[2]
raw_y_range <- max_raw_y - min_raw_y
min_y_coords <- difference/(1 - (test_summary - min_raw_y)/(control_summary - min_raw_y))
delta_y_range <- raw_y_range * -min_y_coords/(control_summary - min_raw_y)
delta_plot <- delta_plot +
theme_classic() +
coord_cartesian(ylim = c(min_y_coords, min_y_coords + delta_y_range),
xlim = c(1.8, delta_x_max+0.4),
expand = FALSE) +
scale_x_continuous(breaks = c(2),
labels = delta_x_labels) +
scale_y_continuous(position = "right")
} else {
delta_x_min <- 0.6
delta_x_scalar <- 0.3
# Extend xaxis for minimeta/deltadelta.
if (isTRUE(minimeta) || isTRUE(delta2)) {
delta_x_max <- delta_x_max + 2
}
## Custom contrast_ylim
delta_ylim <- plot_kwargs$contrast_ylim
if (isFALSE(is.null(delta_ylim))) {
delta_y_min <- delta_ylim[1]
delta_y_max <- delta_ylim[2]
delta_y_mean <- (delta_y_max - delta_y_min)/2
}
delta_plot <- delta_plot +
theme_classic() +
coord_cartesian(ylim = c(delta_y_min - delta_y_mean/10,
delta_y_max),
xlim = c(delta_x_min, delta_x_max+delta_x_scalar),
expand = FALSE) +
scale_x_continuous(breaks = x_axis_breaks,
labels = delta_x_labels)
}
#### Add bootci Component ####
# if isFALSE(show_delta = FALSE) || isFALSE(show_mini_meta)
if (delta2 != dabest_effectsize_obj$delta2 || minimeta != dabest_effectsize_obj$minimeta) {
boot_result <- boot_result[-nrow(boot_result),]
}
ci_low = boot_result$bca_ci_low
ci_high = boot_result$bca_ci_high
difference = boot_result$difference
if (isTRUE(is_bootci)) {
delta_plot <- delta_plot +
geom_bootci(aes(x = x_axis_breaks,
ymin = ci_low,
ymax = ci_high,
middle = difference,
dotsize = es_marker_size,
linesize = es_line_size))
}
#### Add zero_dot Component ####
# removes extra dot if isTRUE(show_delta2) || isTRUE(show_mini_meta)
if (isTRUE(delta2) || isTRUE(minimeta)) {
zero_dot_x_breaks <- zero_dot_x_breaks[-length(zero_dot_x_breaks)]
}
if (isTRUE(is_zero_dot)) {
delta_plot <- delta_plot +
geom_bootci(aes(x = zero_dot_x_breaks,
ymin = 0,
ymax = 0,
middle = 0,
dotsize = es_marker_size,
linesize = es_line_size))
}
#### Add summary lines Component ####
if (isTRUE(is_summary_lines)) {
delta_plot <- delta_plot +
geom_segment(colour = "black",
linewidth = 0.3,
aes(x = 1.8,
xend = delta_x_max+0.4,
y = difference,
yend = difference)) +
geom_segment(colour = "black",
linewidth = 0.3,
aes(x = 1.8,
xend = delta_x_max+0.4,
y = 0,
yend = 0))
}
#### Remove xaxis and redraw xaxis component ####
if (isTRUE(float_contrast)) {
delta_plot <- delta_plot +
float_contrast_theme +
geom_hline(linewidth = 0.8,
yintercept = min_y_coords)
} else {
# Obtain xaxis line and ticks elements for xaxis redraw
if(main_plot_type == "sankey" && isFALSE(flow)) {
idx_for_xaxis_redraw <- remove_last_ele_from_nested_list(idx)
dfs_for_xaxis_redraw <- create_dfs_for_xaxis_redraw(idx_for_xaxis_redraw)
df_for_line <- dfs_for_xaxis_redraw$df_for_line
df_for_ticks <- dfs_for_xaxis_redraw$df_for_ticks
df_for_line <- df_for_line %>%
mutate(x = x + 0.5 + (x-1),
xend = xend + 0.5 + (xend-1))
df_for_ticks <- df_for_ticks %>%
mutate(x = x + 0.5 + (x-1))
} else {
dfs_for_xaxis_redraw <- create_dfs_for_xaxis_redraw(idx)
df_for_line <- dfs_for_xaxis_redraw$df_for_line
df_for_ticks <- dfs_for_xaxis_redraw$df_for_ticks
}
delta_plot <- delta_plot +
non_float_contrast_theme +
# Redraw xaxis line
geom_segment(data = df_for_line,
linewidth = 0.5,
lineend = "square",
color = "black",
aes(x = x,
xend = xend,
y = delta_y_min - delta_y_mean/22,
yend = delta_y_min - delta_y_mean/22)) +
# Redraw xaxis ticks
geom_segment(data = df_for_ticks,
linewidth = 0.5,
lineend = "square",
color = "black",
aes(x = x,
xend = x,
y = delta_y_min - delta_y_mean/22,
yend = delta_y_min - delta_y_mean/10))
}
#### Add y = 0 line Component ####
if (isFALSE(float_contrast)) {
zero_line_xend <- delta_x_max + 0.3
if (isTRUE(is_deltadelta)) {
zero_line_xend <- zero_line_xend + 0.2
}
delta_plot <- delta_plot +
geom_segment(colour = "black",
linewidth = 0.3,
aes(x = 0.6,
xend = zero_line_xend,
y = 0,
yend = 0))
}
#### Add y_labels Component ####
delta_plot <- delta_plot +
labs(y = delta_y_labels)
#### Add extra_axis Componenet ####
if(isTRUE(is_deltadelta)) {
delta_plot <- delta_plot +
scale_y_continuous(sec.axis = dup_axis(name = "delta-delta"))
}
#### Adjust font sizes ####
delta_plot <- delta_plot +
theme(axis.text.x = element_text(size = contrast_x_text),
axis.title.y = element_text(size = contrast_y_text))
return(list(delta_plot = delta_plot, delta_range = c(delta_y_min - delta_y_mean/10, delta_y_max)))
}
plot_extra_yaxis <- function(range, position, hline_yintercept = NULL, label) {
extra_yaxis_plot <- ggplot() +
theme_classic() +
non_float_contrast_theme +
# Setting scaling and limits
coord_cartesian(ylim = range,
xlim = c(-10, 10),
expand = FALSE) +
scale_x_continuous(breaks = c(0),
labels = "") +
labs(y = label) +
scale_y_continuous(position = position)
if (isFALSE(is.null(hline_yintercept))) {
extra_yaxis_plot <- extra_yaxis_plot +
geom_hline(linewidth = 0.3, yintercept = hline_yintercept)
}
return(extra_yaxis_plot)
}
apply_palette <- function(ggplot_object, palette_name) {
ggplot_object <- switch(
palette_name,
"npg" =
ggplot_object + scale_color_npg() + scale_fill_npg(),
"aaas" =
ggplot_object + scale_color_aaas() + scale_fill_aaas(),
"nejm" =
ggplot_object + scale_color_nejm() + scale_fill_nejm(),
"lancet" =
ggplot_object + scale_color_lancet() + scale_fill_lancet(),
"jama" =
ggplot_object + scale_color_jama() + scale_fill_jama(),
"jco" =
ggplot_object + scale_color_jco() + scale_fill_jco(),
"ucscgb" =
ggplot_object + scale_color_ucscgb() + scale_fill_ucscgb(),
"d3" =
ggplot_object + scale_color_d3() + scale_fill_d3(),
"locuszoom" =
ggplot_object + scale_color_locuszoom() + scale_fill_locuszoom(),
"igv" =
ggplot_object + scale_color_igv() + scale_fill_igv(),
"cosmic" =
ggplot_object + scale_color_cosmic() + scale_fill_cosmic(),
"uchicago" =
ggplot_object + scale_color_uchicago() + scale_fill_uchicago(),
"brewer" =
ggplot_object + scale_color_brewer() + scale_fill_brewer(),
"ordinal" =
ggplot_object + scale_color_ordinal() + scale_fill_ordinal(),
"viridis_d" =
ggplot_object + scale_color_viridis_d() + scale_fill_viridis_d()
)
return(ggplot_object)
}
dabest_plot <- function(dabest_effectsize_obj, float_contrast = TRUE, ...) {
if (class(dabest_effectsize_obj)!="dabest_effectsize") {
cli::cli_abort(c("{.field dabest_effectsize_obj} must be a {.cls dabest_effectsize} object."),
"x" = "Please supply a {.cls dabest_effectsize} object.")
}
plot_kwargs <- list(...)
plot_kwargs <- assign_plot_kwargs(dabest_effectsize_obj, plot_kwargs)
custom_palette <- plot_kwargs$custom_palette
is_colour <- dabest_effectsize_obj$is_colour
is_deltadelta <- plot_kwargs$show_delta2
is_mini_meta <- plot_kwargs$show_mini_meta
idx <- dabest_effectsize_obj$idx
raw_legend <- NULL
if(length(unlist(idx)) >= 3) {
float_contrast <- FALSE
}
if(isFALSE(float_contrast)) {
raw_plot <- plot_raw(dabest_effectsize_obj, float_contrast=FALSE, plot_kwargs)
delta_plot <- plot_delta(dabest_effectsize_obj, float_contrast=FALSE, plot_kwargs)
delta_range <- delta_plot$delta_range
delta_plot <- delta_plot$delta_plot
raw_plot <- apply_palette(raw_plot, custom_palette)
delta_plot <- apply_palette(delta_plot, custom_palette)
raw_legend <- get_legend(raw_plot +
guides(alpha = "none") +
theme(legend.box.margin = margin(0, 0, 0, 0)))
plot_margin <- ggplot2::unit(c(0, 0, 0, 0), "pt")
if(isTRUE(is_mini_meta)) {
plot_margin <- ggplot2::unit(c(0, 5.5, 0, 0), "pt")
}
final_plot <- cowplot::plot_grid(
plotlist   = list(raw_plot + theme(legend.position="none",
plot.margin = plot_margin),
delta_plot + theme(legend.position="none",
plot.margin = plot_margin)),
nrow       = 2,
ncol       = 1,
axis       = "tblr",
align      = "vh"
)
if(isTRUE(is_colour)) {
legend_plot <- cowplot::plot_grid(
plotlist = list(raw_legend, NULL),
nrow = 2,
ncol = 1,
rel_heights = c(0.1, 0.9)
)
final_plot <- cowplot::plot_grid(final_plot, legend_plot, ncol = 2, nrow = 1, rel_widths = c(0.9, 0.1))
}
return(final_plot)
} else {
#isTRUE(float_contrast)
raw_plot <- plot_raw(dabest_effectsize_obj, float_contrast=TRUE, plot_kwargs)
delta_plot <- plot_delta(dabest_effectsize_obj, float_contrast=TRUE, plot_kwargs)
delta_plot_range <- delta_plot$delta_range
delta_plot <- delta_plot$delta_plot
raw_plot <- apply_palette(raw_plot, custom_palette)
delta_plot <- apply_palette(delta_plot, custom_palette)
final_plot <- cowplot::plot_grid(
plotlist   = list(raw_plot + theme(legend.position="none"),
delta_plot + theme(legend.position="none")),
nrow       = 1,
ncol       = 2,
rel_widths = c(0.75, 0.25),
axis       = "lr",
align      = "h"
)
if(isTRUE(is_colour)) {
raw_legend <- get_legend(raw_plot +
guides(color = guide_legend(nrow = 1),
alpha = "none") +
theme(legend.position = "bottom"))
final_plot <- cowplot::plot_grid(final_plot, raw_legend, ncol = 1, rel_heights = c(0.9, 0.1))
}
return(final_plot)
}
}
set.seed(12345)
N = 40
c1 <- rnorm(N, mean = 100, sd = 25)
c2 <- rnorm(N, mean = 100, sd = 50)
g1 <- rnorm(N, mean = 120, sd = 25)
g2 <- rnorm(N, mean = 110, sd = 50)
g3 <- rnorm(N, mean = 100, sd = 12)
g4 <- rnorm(N, mean = 100, sd = 50)
gender <- c(rep('Male', N/2), rep('Female', N/2))
dummy <- rep("Dummy", N)
id <- 1: N
wide.data <- tibble::tibble(
Control1 = c1, Control2 = c2,
Group1 = g1, Group2 = g2, Group3 = g3, Group4 = g4,
Dummy = dummy,
Gender = gender, ID = id)
twogroup_data <- wide.data %>%
tidyr::gather(key = Group, value = Measurement, -ID, -Gender, -Dummy)
dabest_obj <- load(data = twogroup_data, x = Group, y = Measurement, idx = c("Control1", "Group1"))
dabest_obj.mean_diff <- mean_diff(dabest_obj)
# dabest_obj.hedges_g <- hedges_g(dabest_obj)
# alternative way of plotting is
# dabest_obj.mean_diff.plot <- load(data = my.data, x = Group, y = Measurement, idx = c("Control1", "Group1")) %>%
#   mean_diff() %>%
#   dabest_plot()
#
# dabest_obj.mean_diff.plot
dabest_plot(dabest_obj.mean_diff, TRUE, swarm_label = "This is my\nrawdata", contrast_label="The bootstrap\ndistribtions!", swarm_x_text = 20, swarm_y_text = 30, contrast_y_text = 30, contrast_x_text = 40)
dabest_plot(dabest_obj.mean_diff, TRUE, swarm_ylim = c(50, 120), custom_palette = "jama")
dabest_plot(dabest_obj.mean_diff, FALSE, swarm_ylim = c(50, 120), custom_palette = "lancet")
